{"Structs/SVGParserSupportedElements.html#/s:8SwiftSVG26SVGParserSupportedElementsV16ElementGeneratora":{"name":"ElementGenerator","abstract":"<p>Typealias that serves as a placeholder for a closure that returns a new <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGElement.html\">SVGElement</a></code> instance</p>","parent_name":"SVGParserSupportedElements"},"Structs/SVGParserSupportedElements.html#/s:8SwiftSVG26SVGParserSupportedElementsV4tagsSDySSAA10SVGElement_pycGvp":{"name":"tags","abstract":"<p>A dictionary of all the supported elements and attributes for a given parser.</p>","parent_name":"SVGParserSupportedElements"},"Structs/SVGParserSupportedElements.html#/s:8SwiftSVG26SVGParserSupportedElementsV9barebonesACvpZ":{"name":"barebones","abstract":"<p>A configuration that will only parse <code>&lt;path&gt;</code> elements and the <code>d</code> and <code>fill attributes</code>. Use this configuration if you know you will only be parsing <code>&lt;path&gt;</code> elements with fill colors</p>","parent_name":"SVGParserSupportedElements"},"Structs/SVGParserSupportedElements.html#/s:8SwiftSVG26SVGParserSupportedElementsV03alldE0ACvpZ":{"name":"allSupportedElements","abstract":"<p>A configuration that is the full set of elements and attributes that SwiftSVG supports. This is the default configuration for the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/NSXMLSVGParser.html\">NSXMLSVGParser</a></code>.</p>","parent_name":"SVGParserSupportedElements"},"Structs/PathDLexer.html#/s:8SwiftSVG10PathDLexerV7Elementa":{"name":"Element","abstract":"<p>Generates a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code></p>","parent_name":"PathDLexer"},"Structs/PathDLexer.html#/s:8SwiftSVG10PathDLexerV10pathStringACSS_tcfc":{"name":"init(pathString:)","abstract":"<p>Initializer for creating a new <code>PathDLexer</code> from a path d string</p>","parent_name":"PathDLexer"},"Structs/PathDLexer.html#/s:8SwiftSVG10PathDLexerV12makeIteratorACyF":{"name":"makeIterator()","abstract":"<p>Required by Swift&rsquo;s <code>IteratorProtocol</code> that returns a new <code>PathDLexer</code></p>","parent_name":"PathDLexer"},"Structs/PathDLexer.html#/s:8SwiftSVG10PathDLexerV4nextAA0C7Command_pSgyF":{"name":"next()","abstract":"<p>Required by Swift&rsquo;s <code>IteratorProtocol</code> that returns the next <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> or nil if it&rsquo;s at the end of the sequence</p>","parent_name":"PathDLexer"},"Structs/PathDConstants.html#/s:8SwiftSVG14PathDConstantsV10DCharacterO":{"name":"DCharacter","abstract":"<p>Valid path letters that can be used in the path d string</p>","parent_name":"PathDConstants"},"Structs/PathDConstants.html#/s:8SwiftSVG14PathDConstantsV19characterDictionarySDys4Int8VAA0C7Command_pGvpZ":{"name":"characterDictionary","abstract":"<p>A dictionary that generates a new <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> based on the <code>CChar</code> value of the SVG path letter</p>","parent_name":"PathDConstants"},"Structs/SmoothQuadraticCurveTo.html#/s:8SwiftSVG11PathCommandP7execute2on08previousD0ySo08NSBezierC0C_AA08PreviousD0_pSgtF":{"name":"execute(on:previousCommand:)","parent_name":"SmoothQuadraticCurveTo"},"Structs/QuadraticCurveTo.html#/s:8SwiftSVG11PathCommandP7execute2on08previousD0ySo08NSBezierC0C_AA08PreviousD0_pSgtF":{"name":"execute(on:previousCommand:)","parent_name":"QuadraticCurveTo"},"Structs/SmoothCurveTo.html#/s:8SwiftSVG13SmoothCurveToV7execute2on15previousCommandySo12NSBezierPathC_AA08PreviousI0_pSgtF":{"name":"execute(on:previousCommand:)","abstract":"<p>Shortcut cubic Bezier curve to that add a new path ending up at <code>CGPoint(self.coordinateBuffer[0], self.coordinateBuffer[1])</code> with a single control point in the middle.</p>","parent_name":"SmoothCurveTo"},"Structs/CurveTo.html#/s:8SwiftSVG7CurveToV7execute2on15previousCommandySo12NSBezierPathC_AA08PreviousH0_pSgtF":{"name":"execute(on:previousCommand:)","abstract":"<p>Adds a cubic Bezier curve to <code>path</code>. The path will end up at <code>CGPoint(self.coordinateBuffer[4], self.coordinateBuffer[5])</code>. The control point for <code>path.currentPoint</code> will be <code>CGPoint(self.coordinateBuffer[0], self.coordinateBuffer[1])</code>. Then controle point for the end point will be CGPoint(self.coordinateBuffer[2], self.coordinateBuffer[3])</p>","parent_name":"CurveTo"},"Structs/VerticalLineTo.html#/s:8SwiftSVG14VerticalLineToV7execute2on15previousCommandySo12NSBezierPathC_AA08PreviousI0_pSgtF":{"name":"execute(on:previousCommand:)","abstract":"<p>Adds a vertical line from the currentPoint to <code>CGPoint(path.currentPoint.y, self.coordinateBuffer[0])</code></p>","parent_name":"VerticalLineTo"},"Structs/HorizontalLineTo.html#/s:8SwiftSVG16HorizontalLineToV7execute2on15previousCommandySo12NSBezierPathC_AA08PreviousI0_pSgtF":{"name":"execute(on:previousCommand:)","abstract":"<p>Adds a horizontal line from the currentPoint to <code>CGPoint(self.coordinateBuffer[0], path.currentPoint.y)</code></p>","parent_name":"HorizontalLineTo"},"Structs/LineTo.html#/s:8SwiftSVG6LineToV7execute2on15previousCommandySo12NSBezierPathC_AA08PreviousH0_pSgtF":{"name":"execute(on:previousCommand:)","abstract":"<p>Creates a line from the <code>path.currentPoint</code> to point <code>CGPoint(self.coordinateBuffer[0], coordinateBuffer[1])</code></p>","parent_name":"LineTo"},"Structs/ClosePath.html#/s:8SwiftSVG9ClosePathV7execute2on15previousCommandySo08NSBezierD0C_AA08PreviousH0_pSgtF":{"name":"execute(on:previousCommand:)","abstract":"<p>Closes the current path</p>","parent_name":"ClosePath"},"Structs/MoveTo.html#/s:8SwiftSVG6MoveToV7execute2on15previousCommandySo12NSBezierPathC_AA08PreviousH0_pSgtF":{"name":"execute(on:previousCommand:)","abstract":"<p>This will move the current point to <code>CGPoint(self.coordinateBuffer[0], self.coordinateBuffer[1])</code>.</p>","parent_name":"MoveTo"},"Structs/CoordinateLexer.html#/s:8SwiftSVG15CoordinateLexerV7Elementa":{"name":"Element","abstract":"<p>Generates a <code>CGPoint</code></p>","parent_name":"CoordinateLexer"},"Structs/CoordinateLexer.html#/s:8SwiftSVG15CoordinateLexerV16coordinateStringACSS_tcfc":{"name":"init(coordinateString:)","abstract":"<p>Creates a new <code>CoordinateLexer</code> from a comma or space separated number string</p>","parent_name":"CoordinateLexer"},"Structs/CoordinateLexer.html#/s:8SwiftSVG15CoordinateLexerV12makeIteratorACyF":{"name":"makeIterator()","abstract":"<p>Required by Swift&rsquo;s <code>IteratorProtocol</code> that returns a new <code>CoordinateLexer</code></p>","parent_name":"CoordinateLexer"},"Structs/CoordinateLexer.html#/s:8SwiftSVG15CoordinateLexerV4nextSo7CGPointVSgyF":{"name":"next()","abstract":"<p>Required by Swift&rsquo;s <code>IteratorProtocol</code> that returns the next <code>CGPoint</code> or nil if it&rsquo;s at the end of the sequence</p>","parent_name":"CoordinateLexer"},"Structs/NamedColors.html#/s:8SwiftSVG11NamedColorsVySo10CGColorRefaSgSScip":{"name":"subscript(_:)","abstract":"<p>Subscript to access the named color. Must be one of the officially supported values listed <a href=\"https://www.w3.org/TR/SVGColor12/#icccolor\">here</a></p>","parent_name":"NamedColors"},"Structs/SVGRootElement.html#/s:8SwiftSVG24DelaysApplyingAttributesP07delayedE0SDyS2SGvp":{"name":"delayedAttributes","parent_name":"SVGRootElement"},"Structs/SVGRootElement.html#/s:8SwiftSVG19SVGContainerElementP14containerLayerSo7CALayerCvp":{"name":"containerLayer","parent_name":"SVGRootElement"},"Structs/SVGRootElement.html#/s:8SwiftSVG10SVGElementP19supportedAttributesSDySSySScGvp":{"name":"supportedAttributes","parent_name":"SVGRootElement"},"Structs/SVGRootElement.html#/s:8SwiftSVG14SVGRootElementV10parseWidth12lengthStringySS_tF":{"name":"parseWidth(lengthString:)","abstract":"<p>Function that parses a number string and sets the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SVGRootElement.html#/s:8SwiftSVG19SVGContainerElementP14containerLayerSo7CALayerCvp\">containerLayer</a></code>&lsquo;s width</p>","parent_name":"SVGRootElement"},"Structs/SVGRootElement.html#/s:8SwiftSVG14SVGRootElementV11parseHeight12lengthStringySS_tF":{"name":"parseHeight(lengthString:)","abstract":"<p>Function that parses a number string and sets the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SVGRootElement.html#/s:8SwiftSVG19SVGContainerElementP14containerLayerSo7CALayerCvp\">containerLayer</a></code>&lsquo;s height</p>","parent_name":"SVGRootElement"},"Structs/SVGRootElement.html#/s:8SwiftSVG14SVGRootElementV7viewBox11coordinatesySS_tF":{"name":"viewBox(coordinates:)","abstract":"<p>nodoc:</p>","parent_name":"SVGRootElement"},"Structs/SVGPolyline.html#/s:8SwiftSVG11SVGPolylineV6pointsADySS_tF":{"name":"points(points:)","abstract":"<p>Parses a coordinate string and creates a new polyline based on them</p>","parent_name":"SVGPolyline"},"Structs/SVGPolygon.html#/s:8SwiftSVG10SVGPolygonV6pointsADySS_tF":{"name":"points(points:)","abstract":"<p>Function that parses a coordinate string and creates a polygon path</p>","parent_name":"SVGPolygon"},"Structs.html#/s:8SwiftSVG9TransformV":{"name":"Transform","abstract":"<p>A struct that represents a single transformation that can then be combined with other <code>Transform</code>s</p>"},"Structs/SVGPolygon.html":{"name":"SVGPolygon","abstract":"<p>Concrete implementation that creates a <code>CAShapeLayer</code> from a <code>&lt;polygon&gt;</code> element and its attributes</p>"},"Structs/SVGPolyline.html":{"name":"SVGPolyline","abstract":"<p>Concrete implementation that creates a <code>CAShapeLayer</code> from a <code>&lt;polyline&gt;</code> element and its attributes</p>"},"Structs/SVGRootElement.html":{"name":"SVGRootElement","abstract":"<p>Concrete implementation that creates a container from a <code>&lt;svg&gt;</code> element and its attributes. This will almost always be the root container element that will container all other <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGElement.html\">SVGElement</a></code> layers</p>"},"Structs.html#/s:8SwiftSVG5StackV":{"name":"Stack","abstract":"<p>A stack data structure</p>"},"Structs/NamedColors.html":{"name":"NamedColors","abstract":"<p>A struct that represents named colors as listed <a href=\"https://www.w3.org/TR/SVGColor12/#icccolor\">here</a></p>"},"Structs/CoordinateLexer.html":{"name":"CoordinateLexer","abstract":"<p>A struct that conforms to the <code>Sequence</code> protocol that takes a coordinate string and continuously returns<code>CGPoint</code>s</p>"},"Structs/MoveTo.html":{"name":"MoveTo","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>M</code> or <code>m</code> command</p>"},"Structs/ClosePath.html":{"name":"ClosePath","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>Z</code> or <code>z</code> command</p>"},"Structs/LineTo.html":{"name":"LineTo","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>L</code> or <code>l</code> command</p>"},"Structs/HorizontalLineTo.html":{"name":"HorizontalLineTo","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>H</code> or <code>h</code> command</p>"},"Structs/VerticalLineTo.html":{"name":"VerticalLineTo","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>V</code> or <code>v</code> command</p>"},"Structs/CurveTo.html":{"name":"CurveTo","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>C</code> or <code>c</code> command</p>"},"Structs/SmoothCurveTo.html":{"name":"SmoothCurveTo","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>S</code> or <code>s</code> command</p>"},"Structs/QuadraticCurveTo.html":{"name":"QuadraticCurveTo","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>Q</code> or <code>q</code> command</p>"},"Structs/SmoothQuadraticCurveTo.html":{"name":"SmoothQuadraticCurveTo","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>T</code> or <code>t</code> command</p>"},"Structs.html#/s:8SwiftSVG13EllipticalArcV":{"name":"EllipticalArc","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html\">PathCommand</a></code> that corresponds to the SVG <code>A</code> or <code>a</code> command</p>"},"Structs/PathDConstants.html":{"name":"PathDConstants","abstract":"<p>A struct that maps <code>&lt;path&gt;</code> d commands to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGElement.html\">SVGElement</a></code>s</p>"},"Structs/PathDLexer.html":{"name":"PathDLexer","abstract":"<p>A struct that conforms to the <code>Sequence</code> protocol that takes a <code>&lt;path&gt;</code> <code>d</code> string and returns <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGElement.html\">SVGElement</a></code> instances</p>"},"Structs/SVGParserSupportedElements.html":{"name":"SVGParserSupportedElements","abstract":"<p>A struct that lists all the supported elements and attributes for a parser</p>"},"Protocols/SVGParser.html#/s:8SwiftSVG9SVGParserP7SVGData17supportedElements10completionx10Foundation4DataV_AA0c9SupportedF0VSgyAA8SVGLayerCcSgtcfc":{"name":"init(SVGData:supportedElements:completion:)","abstract":"<p>Initializer to create a new <code>SVGParser</code> instance</p>","parent_name":"SVGParser"},"Protocols/SVGParser.html#/s:8SwiftSVG9SVGParserP15completionBlockyAA8SVGLayerCcSgvp":{"name":"completionBlock","abstract":"<p>A closure that is executed after all elements have been processed. Should be guaranteed to be executed after all elements have been processed, even if parsing asynchronously.</p>","parent_name":"SVGParser"},"Protocols/SVGParser.html#/s:8SwiftSVG9SVGParserP17supportedElementsAA0c9SupportedE0VSgvp":{"name":"supportedElements","abstract":"<p>A struct listing all the elements and its attributes that should be parsed</p>","parent_name":"SVGParser"},"Protocols/SVGParser.html#/s:8SwiftSVG9SVGParserP14containerLayerAA8SVGLayerCvp":{"name":"containerLayer","abstract":"<p>A <code>CALayer</code> that will house the finished sublayers of the SVG doc.</p>","parent_name":"SVGParser"},"Protocols/SVGParser.html#/s:8SwiftSVG9SVGParserP12startParsingyyF":{"name":"startParsing()","abstract":"<p>Starts parsing the SVG. Allows you to separate initialization from parse start in case you want to set some things up first.</p>","parent_name":"SVGParser"},"Protocols/PreviousCommand.html#/s:8SwiftSVG15PreviousCommandP16coordinateBufferSaySdGvp":{"name":"coordinateBuffer","abstract":"<p>An array that stores processed coordinates values</p>","parent_name":"PreviousCommand"},"Protocols/PreviousCommand.html#/s:8SwiftSVG15PreviousCommandP8pathTypeAA04PathF0Ovp":{"name":"pathType","abstract":"<p>The path type, relative or absolute</p>","parent_name":"PreviousCommand"},"Protocols/PathCommand.html#/s:8SwiftSVG11PathCommandP16coordinateBufferSaySdGvp":{"name":"coordinateBuffer","abstract":"<p>An array that stores processed coordinates values</p>","parent_name":"PathCommand"},"Protocols/PathCommand.html#/s:8SwiftSVG11PathCommandP26numberOfRequiredParametersSivp":{"name":"numberOfRequiredParameters","abstract":"<p>The minimum number of coordinates needed to process the path command</p>","parent_name":"PathCommand"},"Protocols/PathCommand.html#/s:8SwiftSVG11PathCommandP8pathTypeAA0cF0Ovp":{"name":"pathType","abstract":"<p>The path type, relative or absolute</p>","parent_name":"PathCommand"},"Protocols/PathCommand.html#/s:8SwiftSVG11PathCommandP8pathTypexAA0cF0O_tcfc":{"name":"init(pathType:)","abstract":"<p>Designated initializer that creates a relative or absolute <code>PathCommand</code></p>","parent_name":"PathCommand"},"Protocols/PathCommand.html#/s:8SwiftSVG11PathCommandP7execute2on08previousD0ySo08NSBezierC0C_AA08PreviousD0_pSgtF":{"name":"execute(on:previousCommand:)","abstract":"<p>Once the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/PathCommand.html#/s:8SwiftSVG11PathCommandP26numberOfRequiredParametersSivp\">numberOfRequiredParameters</a></code> has been met, this method will append new path to the passed path</p>","parent_name":"PathCommand"},"Protocols/PathCommand.html#/s:8SwiftSVG11PathCommandPAAE07canPushD0Sbvp":{"name":"canPushCommand","abstract":"<p>Default implementation for any <code>PathCommand</code> indicating where there are enough coordinates stored to be able to process the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGElement.html\">SVGElement</a></code></p>","parent_name":"PathCommand"},"Protocols/PathCommand.html#/s:8SwiftSVG11PathCommandPAAE11clearBufferyyF":{"name":"clearBuffer()","abstract":"<p>Function that clears the current number buffer</p>","parent_name":"PathCommand"},"Protocols/PathCommand.html#/s:8SwiftSVG11PathCommandPAAE14pushCoordinateyySdF":{"name":"pushCoordinate(_:)","abstract":"<p>Adds a new coordinate to the buffer</p>","parent_name":"PathCommand"},"Protocols/PathCommand.html#/s:8SwiftSVG11PathCommandPAAE08pointForC4Type_10relativeToSo7CGPointVAG_AGtF":{"name":"pointForPathType(_:relativeTo:)","abstract":"<p>Based on the <code>PathType</code> of this PathCommand, this function returns the relative or absolute point</p>","parent_name":"PathCommand"},"Protocols/StackType.html#/s:8SwiftSVG9StackTypePAAE3pop0C4ItemQzSgyF":{"name":"pop()","abstract":"<p>Default implementation of popping the last element off the stack</p>","parent_name":"StackType"},"Protocols/StackType.html#/s:8SwiftSVG9StackTypePAAE4pushyy0C4ItemQzF":{"name":"push(_:)","abstract":"<p>Push a new element on to the stack</p>","parent_name":"StackType"},"Protocols/StackType.html#/s:8SwiftSVG9StackTypePAAE5clearyyF":{"name":"clear()","abstract":"<p>Clear all elements from the stack</p>","parent_name":"StackType"},"Protocols/StackType.html#/s:8SwiftSVG9StackTypePAAE5countSivp":{"name":"count","abstract":"<p>Returns the number of elements on the stack</p>","parent_name":"StackType"},"Protocols/StackType.html#/s:8SwiftSVG9StackTypePAAE7isEmptySbvp":{"name":"isEmpty","abstract":"<p>Check whether the stack is empty or not</p>","parent_name":"StackType"},"Protocols/StackType.html#/s:8SwiftSVG9StackTypePAAE4last0C4ItemQzSgvp":{"name":"last","abstract":"<p>Return the last element on the stack without popping it off the stack. Equivalent to peek in other stack implementations</p>","parent_name":"StackType"},"Protocols/SVGShapeElement.html#/s:8SwiftSVG15SVGShapeElementP8svgLayerSo07CAShapeF0Cvp":{"name":"svgLayer","abstract":"<p>The <code>CAShapeLayer</code> that can draw the path data.</p>","parent_name":"SVGShapeElement"},"Protocols/SVGShapeElement.html#/s:8SwiftSVG15SVGShapeElementPAAE11boundingBoxSo6CGRectVSgvp":{"name":"boundingBox","abstract":"<p>The minimum rect that encompasses all of the subpaths</p>","parent_name":"SVGShapeElement"},"Protocols/SVGElement.html#/s:8SwiftSVG10SVGElementP11elementNameSSvpZ":{"name":"elementName","abstract":"<p>The element name as defined in the SVG specification</p>","parent_name":"SVGElement"},"Protocols/SVGElement.html#/s:8SwiftSVG10SVGElementP19supportedAttributesSDySSySScGvp":{"name":"supportedAttributes","abstract":"<p>Dictionary of attributes of a given element that are supported by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGParser.html\">SVGParser</a></code>. Keys are the name of an element&rsquo;s attribute such as <code>d</code>, <code>fill</code>, and <code>rx</code>. Values are a closure that is used to process the given attribute.</p>","parent_name":"SVGElement"},"Protocols/SVGElement.html#/s:8SwiftSVG10SVGElementP17didProcessElement2inyAA012SVGContainerF0_pSg_tF":{"name":"didProcessElement(in:)","abstract":"<p>An action to perform once the parser has dispatched all attributes to a given <code>SVGElement</code> instance</p>","parent_name":"SVGElement"},"Protocols/SVGContainerElement.html#/s:8SwiftSVG19SVGContainerElementP14containerLayerSo7CALayerCvp":{"name":"containerLayer","abstract":"<p>The layer that stores all the SVG sublayers</p>","parent_name":"SVGContainerElement"},"Protocols/ParsesAsynchronously.html#/s:8SwiftSVG20ParsesAsynchronouslyP17asyncParseManagerAA27CanManageAsychronousParsing_pSgvp":{"name":"asyncParseManager","abstract":"<p>The delegate instance that can manage asynchronous parsing</p>","parent_name":"ParsesAsynchronously"},"Protocols/CanManageAsychronousParsing.html#/s:8SwiftSVG27CanManageAsychronousParsingP18finishedProcessingyySo12CAShapeLayerCF":{"name":"finishedProcessing(_:)","abstract":"<p>The callback called when an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ParsesAsynchronously.html\">ParsesAsynchronously</a></code> element has finished parsing</p>","parent_name":"CanManageAsychronousParsing"},"Protocols/Transformable.html#/s:8SwiftSVG13TransformablePA2A19SVGContainerElementRzrlE16layerToTransformSo7CALayerCvp":{"name":"layerToTransform","abstract":"<p>Default implementation for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGContainerElement.html\">SVGContainerElement</a></code> that transforms the <code>containerLayer</code></p>","parent_name":"Transformable"},"Protocols/Transformable.html#/s:8SwiftSVG13TransformablePA2A15SVGShapeElementRzrlE16layerToTransformSo7CALayerCvp":{"name":"layerToTransform","abstract":"<p>Default implementation for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGShapeElement.html\">SVGShapeElement</a></code> that transforms the <code>svgLayer</code></p>","parent_name":"Transformable"},"Protocols/Transformable.html#/s:8SwiftSVG13TransformablePAAE19transformAttributesSDySSySScGvp":{"name":"transformAttributes","abstract":"<p>The curried function to be used for the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGElement.html\">SVGElement</a></code>&lsquo;s default implementation. This dictionary is meant to be used in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SVGParserSupportedElements.html\">SVGParserSupportedElements</a></code> instance</p>","parent_name":"Transformable"},"Protocols/Transformable.html#/s:8SwiftSVG13TransformablePAAE9transformyySSF":{"name":"transform(_:)","abstract":"<p>Parses and applies the SVG transform string to this <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGElement.html\">SVGElement</a></code>&lsquo;s <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code>. Can parse multiple transforms separated by spaces</p>","parent_name":"Transformable"},"Protocols/Stylable.html#/s:8SwiftSVG8StylablePA2A10SVGElementRzrlE15styleAttributesSDySSySScGvp":{"name":"styleAttributes","abstract":"<p>The curried function to be used for the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGElement.html\">SVGElement</a></code>&lsquo;s default implementation. This dictionary is meant to be used in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SVGParserSupportedElements.html\">SVGParserSupportedElements</a></code> instance</p>","parent_name":"Stylable"},"Protocols/Stylable.html#/s:8SwiftSVG8StylablePA2A10SVGElementRzrlE5styleyySSF":{"name":"style(_:)","abstract":"<p>Parses and applies the css-style <code>style</code> string to this <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGElement.html\">SVGElement</a></code>&lsquo;s <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code></p>","parent_name":"Stylable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A15SVGShapeElementRzrlE16strokeAttributesSDySSySScGvp":{"name":"strokeAttributes","abstract":"<p>The curried functions to be used for the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGShapeElement.html\">SVGShapeElement</a></code>&lsquo;s default implementation. This dictionary is meant to be used in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SVGParserSupportedElements.html\">SVGParserSupportedElements</a></code> instance</p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A15SVGShapeElementRzrlE13strokeLineCap04lineH0ySS_tF":{"name":"strokeLineCap(lineCap:)","abstract":"<p>Sets the stroke line cap of the underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code></p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A15SVGShapeElementRzrlE11strokeColorAEySS_tF":{"name":"strokeColor(strokeColor:)","abstract":"<p>Sets the stroke color of the underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code></p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A15SVGShapeElementRzrlE14strokeLineJoin04lineH0ySS_tF":{"name":"strokeLineJoin(lineJoin:)","abstract":"<p>Sets the stroke line join of the underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code></p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A15SVGShapeElementRzrlE16strokeMiterLimit05miterH0ySS_tF":{"name":"strokeMiterLimit(miterLimit:)","abstract":"<p>Sets the stroke miter limit of the underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code></p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A15SVGShapeElementRzrlE11strokeWidthAEySS_tF":{"name":"strokeWidth(strokeWidth:)","abstract":"<p>Sets the stroke width of the underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code></p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A8SVGGroupCRbzrlE16strokeAttributesSDySSySScGvp":{"name":"strokeAttributes","abstract":"<p>The curried functions to be used for the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGGroup.html\">SVGGroup</a></code>&lsquo;s default implementation. This dictionary is meant to be used in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SVGParserSupportedElements.html\">SVGParserSupportedElements</a></code> instance</p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A8SVGGroupCRbzrlE13strokeLineCap04lineG0ySS_tF":{"name":"strokeLineCap(lineCap:)","abstract":"<p>Sets the stroke line cap of all subelements</p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A8SVGGroupCRbzrlE11strokeColorAFySS_tF":{"name":"strokeColor(strokeColor:)","abstract":"<p>Sets the stroke color of all subelements</p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A8SVGGroupCRbzrlE14strokeLineJoin04lineG0ySS_tF":{"name":"strokeLineJoin(lineJoin:)","abstract":"<p>Sets the stroke line join of all subelements</p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A8SVGGroupCRbzrlE16strokeMiterLimit05miterG0ySS_tF":{"name":"strokeMiterLimit(miterLimit:)","abstract":"<p>Sets the stroke miter limit of all subelements</p>","parent_name":"Strokable"},"Protocols/Strokable.html#/s:8SwiftSVG9StrokablePA2A8SVGGroupCRbzrlE11strokeWidthAFySS_tF":{"name":"strokeWidth(strokeWidth:)","abstract":"<p>Sets the stroke width of all subelements</p>","parent_name":"Strokable"},"Protocols/Fillable.html#/s:8SwiftSVG8FillablePA2A15SVGShapeElementRzrlE14fillAttributesSDySSySScGvp":{"name":"fillAttributes","abstract":"<p>The curried functions to be used for the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGShapeElement.html\">SVGShapeElement</a></code>&lsquo;s default implementation. This dictionary is meant to be used in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SVGParserSupportedElements.html\">SVGParserSupportedElements</a></code> instance</p>","parent_name":"Fillable"},"Protocols/Fillable.html#/s:8SwiftSVG8FillablePA2A15SVGShapeElementRzrlE4fill0F5ColorySS_tF":{"name":"fill(fillColor:)","abstract":"<p>Sets the fill color of the underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code></p>","parent_name":"Fillable"},"Protocols/Fillable.html#/s:8SwiftSVG8FillablePA2A15SVGShapeElementRzrlE8fillRuleAEySS_tF":{"name":"fillRule(fillRule:)","abstract":"<p>Sets the fill rule of the underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code>. <code>CAShapeLayer</code>s have 2 possible values: <code>non-zero</code> (default), and <code>evenodd</code></p>","parent_name":"Fillable"},"Protocols/Fillable.html#/s:8SwiftSVG8FillablePA2A15SVGShapeElementRzrlE11fillOpacity7opacityySS_tF":{"name":"fillOpacity(opacity:)","abstract":"<p>Sets the fill opacity of the underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code> through its CGColor, not the CALayer&rsquo;s opacity property. This value will override any opacity value passed in with the <code>fill-color</code> attribute.</p>","parent_name":"Fillable"},"Protocols/Fillable.html#/s:8SwiftSVG8FillablePA2A8SVGGroupCRbzrlE14fillAttributesSDySSySScGvp":{"name":"fillAttributes","abstract":"<p>The curried functions to be used for the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGGroup.html\">SVGGroup</a></code>&lsquo;s default implementation. This dictionary is meant to be used in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SVGParserSupportedElements.html\">SVGParserSupportedElements</a></code> instance</p>","parent_name":"Fillable"},"Protocols/Fillable.html#/s:8SwiftSVG8FillablePA2A8SVGGroupCRbzrlE4fill0E5ColorySS_tF":{"name":"fill(fillColor:)","abstract":"<p>Sets the fill color for all subelements of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGGroup.html\">SVGGroup</a></code></p>","parent_name":"Fillable"},"Protocols/Fillable.html#/s:8SwiftSVG8FillablePA2A8SVGGroupCRbzrlE8fillRuleAFySS_tF":{"name":"fillRule(fillRule:)","abstract":"<p>Sets the fill rule for all subelements of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGGroup.html\">SVGGroup</a></code>. <code>CAShapeLayer</code>s have 2 possible values: <code>non-zero</code> (default), and <code>evenodd</code></p>","parent_name":"Fillable"},"Protocols/Fillable.html#/s:8SwiftSVG8FillablePA2A8SVGGroupCRbzrlE11fillOpacity7opacityySS_tF":{"name":"fillOpacity(opacity:)","abstract":"<p>Sets the fill opacity for all subelements of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGGroup.html\">SVGGroup</a></code> through its CGColor, not the CALayer&rsquo;s opacity property.</p>","parent_name":"Fillable"},"Protocols/DelaysApplyingAttributes.html#/s:8SwiftSVG24DelaysApplyingAttributesP07delayedE0SDyS2SGvp":{"name":"delayedAttributes","abstract":"<p>The attributes to apply to all sublayers after all subelements have been processed.</p>","parent_name":"DelaysApplyingAttributes"},"Protocols/DelaysApplyingAttributes.html#/s:8SwiftSVG24DelaysApplyingAttributesPA2A10SVGElementRzrlE012applyDelayedE0yyF":{"name":"applyDelayedAttributes()","abstract":"<p>Applies any saved and supported attributes</p>","parent_name":"DelaysApplyingAttributes"},"Protocols/SVGLayerType.html#/s:8SwiftSVG12SVGLayerTypePAASo7CALayerCRbzrlE11resizeToFityxSo6CGRectVF":{"name":"resizeToFit(_:)","abstract":"<p>Scales a layer to aspect fit the given size.</p>","parent_name":"SVGLayerType"},"Protocols/SVGLayerType.html":{"name":"SVGLayerType","abstract":"<p>A protocol that describes an instance that can store bounding box information</p>"},"Protocols/DelaysApplyingAttributes.html":{"name":"DelaysApplyingAttributes","abstract":"<p>A protocol that describes an instance that will delay processing attributes, usually until in <code>didProcessElement(in container: SVGContainerElement?)</code> because either all path information isn&rsquo;t available or when the element needs to apply an attribute to all subelements.</p>"},"Protocols/Fillable.html":{"name":"Fillable","abstract":"<p>A protocol that described an instance that can be filled. Two default implementations are provided for this protocol: </p>"},"Protocols/Strokable.html":{"name":"Strokable","abstract":"<p>A protocol that described an instance that can be stroked. Two default implementations are provided for this protocol:</p>"},"Protocols/Stylable.html":{"name":"Stylable","abstract":"<p>A protocol that describes instances whose attributes that can be set vis a css style string. A default implementation is supplied that parses the style string and applies the attributes using the <code>SVGelement</code>&lsquo;s <code>supportedAttributes</code>.</p>"},"Protocols/Transformable.html":{"name":"Transformable","abstract":"<p>A protocol that describes an instance that can be transformed via an SVG element&rsquo;s <code>transform</code> attribute. Currently, <code>matrix</code>, <code>rotate</code>, <code>scale</code>, <code>skewX</code>, and <code>skewY</code> are supported. A default implementation is supplied for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGContainerElement.html\">SVGContainerElement</a></code>s that sets the <code>affineTransform</code> of the container layer itself, not on all of its subelements.</p>"},"Protocols/CanManageAsychronousParsing.html":{"name":"CanManageAsychronousParsing","abstract":"<p>A protocol describing an instance that can manage elements that can parse asynchronously. In the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/NSXMLSVGParser.html\">NSXMLSVGParser</a></code> implementation, the parser maintains a simple count of pending asynchronous tasks and decrements the count when an element has finished parsing. When the count has reached zero, a completion block is called</p>"},"Protocols/ParsesAsynchronously.html":{"name":"ParsesAsynchronously","abstract":"<p>A protocol describing an instance that parses asynchronously</p>"},"Protocols/SVGContainerElement.html":{"name":"SVGContainerElement","abstract":"<p>A protocol that describes an instance that can store SVG sublayers and can apply a single attributes to all sublayers.</p>"},"Protocols/SVGElement.html":{"name":"SVGElement","abstract":"<p>A protocol describing an instance that can parse a single SVG element such as"},"Protocols/SVGShapeElement.html":{"name":"SVGShapeElement","abstract":"<p>A protocol that describes an instance that stores the path as a <code>CAShapeLayer</code></p>"},"Protocols/StackType.html":{"name":"StackType","abstract":"<p>A protocol that describes an instance that can act as a stack data structure</p>"},"Protocols/PathCommand.html":{"name":"PathCommand","abstract":"<p>A protocol that describes an instance that can process an individual SVG Element</p>"},"Protocols/PreviousCommand.html":{"name":"PreviousCommand","abstract":"<p>A protocol that describes an instance that represents an SVGElement right before the current one</p>"},"Protocols/SVGParser.html":{"name":"SVGParser","abstract":"<p>A protocol describing an XML parser capable of parsing SVG data</p>"},"Extensions/String.html#/s:SS8SwiftSVGEySSSnySiGcip":{"name":"subscript(_:)","abstract":"<p>Helper function that creates a new String from a given integer range</p>","parent_name":"String"},"Extensions/String.html#/s:SS8SwiftSVGE14trimWhitespaceSSyF":{"name":"trimWhitespace()","abstract":"<p>Function that trims the whitespace from the beginning and end of a string.</p>","parent_name":"String"},"Extensions/Double.html#/s:Sd8SwiftSVGE9byteArraySdSgSays4Int8VG_tcfc":{"name":"init(byteArray:)","abstract":"<p>Initializer that creates a new Double from a Character byte array</p>","parent_name":"Double"},"Extensions/Float.html#/s:Sf8SwiftSVGE9byteArraySfSgSays4Int8VG_tcfc":{"name":"init(byteArray:)","abstract":"<p>Initializer that creates a new Float from a Character byte array</p>","parent_name":"Float"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV8SwiftSVGEyACSgSScfc":{"name":"init(_:)","abstract":"<p>Initializer that creates a new CGFloat from a String</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV8SwiftSVGE9byteArray4baseACSgSays4Int8VG_s5Int32Vtcfc":{"name":"init(byteArray:base:)","abstract":"<p>Initializer that creates a new CGFloat from a Character byte array with the option to set the base.</p>","parent_name":"CGFloat"},"Extensions/FloatingPoint.html#/s:SF8SwiftSVGE9toRadiansxvp":{"name":"toRadians","abstract":"<p>Converts a <code>FloatingPoint</code> type to radians</p>","parent_name":"FloatingPoint"},"Extensions/FloatingPoint.html#/s:SF8SwiftSVGE9toDegreesxvp":{"name":"toDegrees","abstract":"<p>Converts a <code>FloatingPoint</code> type to degrees</p>","parent_name":"FloatingPoint"},"Extensions/DispatchQueue.html#/s:So17OS_dispatch_queueC8SwiftSVGE9safeAsyncyyyycF":{"name":"safeAsync(_:)","abstract":"<p>An extension that will immediately execute the given block if already on the main thread</p>","parent_name":"DispatchQueue"},"Extensions/Dictionary.html#/s:SD8SwiftSVGE3addyySDyxq_GF":{"name":"add(_:)","abstract":"<p>An extension that add the elements of one dictionary to another</p>","parent_name":"Dictionary"},"Extensions/BinaryFloatingPoint.html#/s:SB8SwiftSVGE12lengthStringxSgSS_tcfc":{"name":"init(lengthString:)","abstract":"<p>Parses a number string with optional suffix, such as <code>px</code>, <code>mm</code></p>","parent_name":"BinaryFloatingPoint"},"Extensions/CAShapeLayer.html#/s:So12CAShapeLayerC8SwiftSVGE10pathStringABSS_tcfc":{"name":"init(pathString:)","abstract":"<p>Convenience initalizer that synchronously parses a single path string and returns a <code>CAShapeLayer</code></p>","parent_name":"CAShapeLayer"},"Extensions/CALayer.html#/s:So7CALayerC8SwiftSVGE6SVGURL6parser10completionAB10Foundation3URLV_AC9SVGParser_pSgyAC8SVGLayerCctcfc":{"name":"init(SVGURL:parser:completion:)","abstract":"<p>Convenience initializer that creates a new <code>CALayer</code> from a local or remote URL. You must provide a completion block and add the passed <code>SVGLayer to a sublayer</code>.</p>","parent_name":"CALayer"},"Extensions/CALayer.html#/s:So7CALayerC8SwiftSVGE7SVGData6parser10completionAB10Foundation4DataV_AC9SVGParser_pSgyAC8SVGLayerCctcfc":{"name":"init(SVGData:parser:completion:)","abstract":"<p>Convenience initializer that creates a new <code>CALayer</code> from SVG data. You must provide a completion block and add the passed <code>SVGLayer to a sublayer</code>.</p>","parent_name":"CALayer"},"Extensions/CALayer.html#/s:So7CALayerC8SwiftSVGE16applyOnSublayers6ofType7closureyxm_yxXEtABRbzlF":{"name":"applyOnSublayers(ofType:closure:)","abstract":"<p>Helper function that applies the given closure on all sublayers of a given type</p>","parent_name":"CALayer"},"Extensions/CALayer.html#/s:So7CALayerC8SwiftSVGE9sublayers2inSayq_Gx_tABRbzr0_lF":{"name":"sublayers(in:)","abstract":"<p>Helper function that returns an array of all sublayers of a given type</p>","parent_name":"CALayer"},"Extensions/CALayer.html":{"name":"CALayer","abstract":"<p>A set of convenience initializers that create new <code>CALayer</code> instances from SVG data.</p>"},"Extensions/CAShapeLayer.html":{"name":"CAShapeLayer"},"Extensions/BinaryFloatingPoint.html":{"name":"BinaryFloatingPoint","abstract":"<p>Extension that takes a length string, e.g. <code>100px</code>, <code>20mm</code> and parses it into a <code>BinaryFloatingPoint</code> (e.g. <code>Float</code>, <code>Double</code>, <code>CGFloat</code>)</p>"},"Extensions/Dictionary.html":{"name":"Dictionary","abstract":"<p>An extension that add the elements of one dictionary to another</p>"},"Extensions/DispatchQueue.html":{"name":"DispatchQueue"},"Extensions/FloatingPoint.html":{"name":"FloatingPoint","abstract":"<p>Extension that converts a <code>FloatingPoint</code> to and from radians and degrees</p>"},"Extensions/CGFloat.html":{"name":"CGFloat"},"Extensions/Float.html":{"name":"Float"},"Extensions/Double.html":{"name":"Double"},"Extensions/String.html":{"name":"String"},"Enums.html#/s:8SwiftSVG8LineJoinO":{"name":"LineJoin","abstract":"<p>Line join type that corresponds to the SVG line join string</p>"},"Enums.html#/s:8SwiftSVG7LineCapO":{"name":"LineCap","abstract":"<p>Line cap type that corresponds to the SVG line cap string</p>"},"Classes/NSXMLSVGParser.html#/s:8SwiftSVG14NSXMLSVGParserC14SVGParserErrorO":{"name":"SVGParserError","abstract":"<p>Error type used when a fatal error has occured</p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/s:8SwiftSVG14NSXMLSVGParserC14containerLayerAA8SVGLayerCvp":{"name":"containerLayer","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code> that will contain all of the SVG&rsquo;s sublayers</p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/s:8SwiftSVG14NSXMLSVGParserC6SVGURL17supportedElements10completionAC10Foundation3URLV_AA018SVGParserSupportedF0VSgyAA8SVGLayerCcSgtcfc":{"name":"init(SVGURL:supportedElements:completion:)","abstract":"<p>Convenience initializer that can initalize an <code>NSXMLSVGParser</code> using a local or remote <code>URL</code></p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/s:8SwiftSVG14NSXMLSVGParserC7SVGData17supportedElements10completionAC10Foundation4DataV_AA018SVGParserSupportedF0VSgyAA8SVGLayerCcSgtcfc":{"name":"init(SVGData:supportedElements:completion:)","abstract":"<p>Initializer that can initalize an <code>NSXMLSVGParser</code> using SVG <code>Data</code></p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/s:8SwiftSVG14NSXMLSVGParserC12startParsingyyF":{"name":"startParsing()","abstract":"<p>Starts parsing the SVG document</p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/c:@M@SwiftSVG@objc(cs)NSXMLSVGParser(im)parser:didStartElement:namespaceURI:qualifiedName:attributes:":{"name":"parser(_:didStartElement:namespaceURI:qualifiedName:attributes:)","abstract":"<p>The <code>XMLParserDelegate</code> method called when the parser has started parsing an SVG element. This implementation will loop through all supported attributes and dispatch the attribiute value to the given curried function.</p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/c:@M@SwiftSVG@objc(cs)NSXMLSVGParser(im)parser:didEndElement:namespaceURI:qualifiedName:":{"name":"parser(_:didEndElement:namespaceURI:qualifiedName:)","abstract":"<p>The <code>XMLParserDelegate</code> method called when the parser has ended parsing an SVG element. This methods pops the last element parsed off the stack and checks if there is an enclosing container layer. Every valid SVG file is guaranteed to have at least one container layer (at a minimum, a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/SVGRootElement.html\">SVGRootElement</a></code> instance).</p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/c:@M@SwiftSVG@objc(cs)NSXMLSVGParser(im)parserDidEndDocument:":{"name":"parserDidEndDocument(_:)","abstract":"<p>The <code>XMLParserDelegate</code> method called when the parser has finished parsing the SVG document. All supported elements and attributes are guaranteed to be dispatched at this point, but there&rsquo;s no guarantee that all elements have finished parsing.</p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/c:@M@SwiftSVG@objc(cs)NSXMLSVGParser(im)parser:parseErrorOccurred:":{"name":"parser(_:parseErrorOccurred:)","abstract":"<p>The <code>XMLParserDelegate</code> method called when the parser has reached a fatal error in parsing. Parsing is stopped if an error is reached and you may want to check that your SVG file passes validation.</p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/s:8SwiftSVG14NSXMLSVGParserC26resizeContainerBoundingBoxyySo6CGRectVSgF":{"name":"resizeContainerBoundingBox(_:)","abstract":"<p>Method that resizes the container bounding box that fits all the subpaths.</p>","parent_name":"NSXMLSVGParser"},"Classes/NSXMLSVGParser.html#/s:8SwiftSVG14NSXMLSVGParserC18finishedProcessingyySo12CAShapeLayerCF":{"name":"finishedProcessing(_:)","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/CanManageAsychronousParsing.html\">CanManageAsychronousParsing</a></code> callback called when an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ParsesAsynchronously.html\">ParsesAsynchronously</a></code> element has finished parsing</p>","parent_name":"NSXMLSVGParser"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC13rectangleRectSo6CGRectVvp":{"name":"rectangleRect","abstract":"<p>The CGRect for the rectangle</p>","parent_name":"SVGRectangle"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC13xCornerRadius12CoreGraphics7CGFloatVvp":{"name":"xCornerRadius","abstract":"<p>The x radius of the corner oval. Defaults to <code>0</code></p>","parent_name":"SVGRectangle"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC13yCornerRadius12CoreGraphics7CGFloatVvp":{"name":"yCornerRadius","abstract":"<p>The y radius of the corner oval. Defaults to <code>0</code></p>","parent_name":"SVGRectangle"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC6parseX1xySS_tF":{"name":"parseX(x:)","abstract":"<p>Function that parses the number string and sets this rectangle&rsquo;s origin x</p>","parent_name":"SVGRectangle"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC6parseY1yySS_tF":{"name":"parseY(y:)","abstract":"<p>Function that parses the number string and sets this rectangle&rsquo;s origin y</p>","parent_name":"SVGRectangle"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC15rectangleHeight6heightySS_tF":{"name":"rectangleHeight(height:)","abstract":"<p>Function that parses the number string and sets this rectangle&rsquo;s height</p>","parent_name":"SVGRectangle"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC14rectangleWidth5widthySS_tF":{"name":"rectangleWidth(width:)","abstract":"<p>Function that parses the number string and sets this rectangle&rsquo;s width</p>","parent_name":"SVGRectangle"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC13xCornerRadiusADySS_tF":{"name":"xCornerRadius(xCornerRadius:)","abstract":"<p>Function that parses the number string and sets this rectangle&rsquo;s x corner radius</p>","parent_name":"SVGRectangle"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC13yCornerRadiusADySS_tF":{"name":"yCornerRadius(yCornerRadius:)","abstract":"<p>Function that parses the number string and sets this rectangle&rsquo;s y corner radius</p>","parent_name":"SVGRectangle"},"Classes/SVGRectangle.html#/s:8SwiftSVG12SVGRectangleC17didProcessElement2inyAA012SVGContainerF0_pSg_tF":{"name":"didProcessElement(in:)","abstract":"<p>Creates a new rectangle path based on the set attributes.</p>","parent_name":"SVGRectangle"},"Classes/SVGPath.html#/s:8SwiftSVG7SVGPathC17delayedAttributesSDyS2SGvp":{"name":"delayedAttributes","abstract":"<p>Attributes that are applied after the path has been processed</p>","parent_name":"SVGPath"},"Classes/SVGPath.html#/s:8SwiftSVG7SVGPathC25shouldParseAsynchronouslySbvp":{"name":"shouldParseAsynchronously","abstract":"<p>Flag that sets whether the path should be parsed asynchronously or not</p>","parent_name":"SVGPath"},"Classes/SVGPath.html#/s:8SwiftSVG7SVGPathC16singlePathStringACSS_tcfc":{"name":"init(singlePathString:)","abstract":"<p>Initializer to to set the <code>svgLayer</code>&lsquo;s cgPath. The path string does not have to be a single path for the whole element, but can include multiple subpaths in the <code>d</code> attribute. For instance, the following is a valid path string to pass:</p>","parent_name":"SVGPath"},"Classes/SVGPath.html#/s:8SwiftSVG7SVGPathC6parseDyySSF":{"name":"parseD(_:)","abstract":"<p>Function that takes a <code>d</code> path string attribute and sets the <code>svgLayer</code>&lsquo;s <code>cgPath</code></p>","parent_name":"SVGPath"},"Classes/SVGPath.html#/s:8SwiftSVG7SVGPathC8clipRuleyySSF":{"name":"clipRule(_:)","abstract":"<p>The clip rule for this path to be applied after the path has been parsed</p>","parent_name":"SVGPath"},"Classes/SVGLine.html#/s:8SwiftSVG7SVGLineC3endSo7CGPointVvp":{"name":"end","abstract":"<p>The line&rsquo;s end point. Defaults to <code>CGPoint.zero</code></p>","parent_name":"SVGLine"},"Classes/SVGLine.html#/s:8SwiftSVG7SVGLineC5startSo7CGPointVvp":{"name":"start","abstract":"<p>The line&rsquo;s end point. Defaults to <code>CGPoint.zero</code></p>","parent_name":"SVGLine"},"Classes/SVGLine.html#/s:8SwiftSVG7SVGLineC2x1ADySS_tF":{"name":"x1(x1:)","abstract":"<p>Function parses a number string and sets this line&rsquo;s start <code>x</code></p>","parent_name":"SVGLine"},"Classes/SVGLine.html#/s:8SwiftSVG7SVGLineC2x2ADySS_tF":{"name":"x2(x2:)","abstract":"<p>Function parses a number string and sets this line&rsquo;s end <code>x</code></p>","parent_name":"SVGLine"},"Classes/SVGLine.html#/s:8SwiftSVG7SVGLineC2y1ADySS_tF":{"name":"y1(y1:)","abstract":"<p>Function parses a number string and sets this line&rsquo;s start <code>y</code></p>","parent_name":"SVGLine"},"Classes/SVGLine.html#/s:8SwiftSVG7SVGLineC2y2ADySS_tF":{"name":"y2(y2:)","abstract":"<p>Function parses a number string and sets this line&rsquo;s end <code>y</code></p>","parent_name":"SVGLine"},"Classes/SVGLine.html#/s:8SwiftSVG7SVGLineC17didProcessElement2inyAA012SVGContainerF0_pSg_tF":{"name":"didProcessElement(in:)","abstract":"<p>Draws a line from the <code>startPoint</code> to the <code>endPoint</code></p>","parent_name":"SVGLine"},"Classes/SVGGroup.html#/s:8SwiftSVG8SVGGroupC17delayedAttributesSDyS2SGvp":{"name":"delayedAttributes","abstract":"<p>Store all attributes and values to be applied after all known sublayers have been added to this container</p>","parent_name":"SVGGroup"},"Classes/SVGGroup.html#/s:8SwiftSVG8SVGGroupC14containerLayerSo7CALayerCvp":{"name":"containerLayer","abstract":"<p>A <code>CALayer</code> that will hold all sublayers of the <code>SVGGroup</code></p>","parent_name":"SVGGroup"},"Classes/SVGGroup.html#/s:8SwiftSVG8SVGGroupC17didProcessElement2inyAA012SVGContainerF0_pSg_tF":{"name":"didProcessElement(in:)","abstract":"<p>The function that is called after all of this group&rsquo;s subelements have been processed. It will apply all stored <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGGroup.html#/s:8SwiftSVG8SVGGroupC17delayedAttributesSDyS2SGvp\">delayedAttributes</a></code> on all sublayers</p>","parent_name":"SVGGroup"},"Classes/SVGEllipse.html#/s:8SwiftSVG10SVGEllipseC13ellipseCenterSo7CGPointVvp":{"name":"ellipseCenter","abstract":"<p>The ellipse&rsquo;s center point. Defaults to <code>CGRect.zero</code></p>","parent_name":"SVGEllipse"},"Classes/SVGEllipse.html#/s:8SwiftSVG10SVGEllipseC7xRadius12CoreGraphics7CGFloatVvp":{"name":"xRadius","abstract":"<p>The ellipse&rsquo;s x radius. Defaults to <code>CGRect.zero</code></p>","parent_name":"SVGEllipse"},"Classes/SVGEllipse.html#/s:8SwiftSVG10SVGEllipseC7yRadius12CoreGraphics7CGFloatVvp":{"name":"yRadius","abstract":"<p>The ellipse&rsquo;s x radius. Defaults to <code>CGRect.zero</code></p>","parent_name":"SVGEllipse"},"Classes/SVGEllipse.html#/s:8SwiftSVG10SVGEllipseC7xRadius1rySS_tF":{"name":"xRadius(r:)","abstract":"<p>Function that parses the number string and sets this instance&rsquo;s x radius</p>","parent_name":"SVGEllipse"},"Classes/SVGEllipse.html#/s:8SwiftSVG10SVGEllipseC7yRadius1rySS_tF":{"name":"yRadius(r:)","abstract":"<p>Function that parses the number string and sets this instance&rsquo;s y radius</p>","parent_name":"SVGEllipse"},"Classes/SVGEllipse.html#/s:8SwiftSVG10SVGEllipseC7xCenter1xySS_tF":{"name":"xCenter(x:)","abstract":"<p>Function that parses the number string and sets this instance&rsquo;s x center</p>","parent_name":"SVGEllipse"},"Classes/SVGEllipse.html#/s:8SwiftSVG10SVGEllipseC7yCenter1yySS_tF":{"name":"yCenter(y:)","abstract":"<p>Function that parses the number string and sets this instance&rsquo;s y center</p>","parent_name":"SVGEllipse"},"Classes/SVGEllipse.html#/s:8SwiftSVG10SVGEllipseC17didProcessElement2inyAA012SVGContainerF0_pSg_tF":{"name":"didProcessElement(in:)","abstract":"<p>Function that is called after the ellipse&rsquo;s center and radius have been parsed and set. This function creates the path and sets the internal <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code>&lsquo;s path.</p>","parent_name":"SVGEllipse"},"Classes/SVGCircle.html#/s:8SwiftSVG9SVGCircleC12circleCenterSo7CGPointVvp":{"name":"circleCenter","abstract":"<p>The circle&rsquo;s center point. Defaults to <code>CGRect.zero</code></p>","parent_name":"SVGCircle"},"Classes/SVGCircle.html#/s:8SwiftSVG9SVGCircleC12circleRadius12CoreGraphics7CGFloatVvp":{"name":"circleRadius","abstract":"<p>The circle&rsquo;s radius. Defaults to <code>0</code></p>","parent_name":"SVGCircle"},"Classes/SVGCircle.html#/s:8SwiftSVG9SVGCircleC6radius1rySS_tF":{"name":"radius(r:)","abstract":"<p>Function that parses the number string and sets this instance&rsquo;s radius</p>","parent_name":"SVGCircle"},"Classes/SVGCircle.html#/s:8SwiftSVG9SVGCircleC7xCenter1xySS_tF":{"name":"xCenter(x:)","abstract":"<p>Function that parses the number string and sets this instance&rsquo;s x center</p>","parent_name":"SVGCircle"},"Classes/SVGCircle.html#/s:8SwiftSVG9SVGCircleC7yCenter1yySS_tF":{"name":"yCenter(y:)","abstract":"<p>Function that parses the number string and sets this instance&rsquo;s y center</p>","parent_name":"SVGCircle"},"Classes/SVGCircle.html#/s:8SwiftSVG9SVGCircleC17didProcessElement2inyAA012SVGContainerF0_pSg_tF":{"name":"didProcessElement(in:)","abstract":"<p>Function that is called after the circle&rsquo;s center and radius have been parsed and set. This function creates the path and sets the internal <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code>&lsquo;s path.</p>","parent_name":"SVGCircle"},"Classes/SVGCache.html#/s:8SwiftSVG8SVGCacheC7defaultACvpZ":{"name":"default","abstract":"<p>A singleton object that is the default store for <code>SVGlayer</code>s</p>","parent_name":"SVGCache"},"Classes/SVGCache.html#/s:8SwiftSVG8SVGCacheCyAA8SVGLayerCSgSScip":{"name":"subscript(_:)","abstract":"<p>Subscript to get or set the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code> in this cache</p>","parent_name":"SVGCache"},"Classes/SVGCache.html#/s:8SwiftSVG8SVGCacheC12removeObject3keyySS_tF":{"name":"removeObject(key:)","abstract":"<p>Removes the value from the cache</p>","parent_name":"SVGCache"},"Classes/SVGView.html#/c:@M@SwiftSVG@objc(cs)SVGView(py)SVGName":{"name":"SVGName","abstract":"<p>The name of the SVG file in the main bundle</p>","parent_name":"SVGView"},"Classes/SVGLayer.html#/s:8SwiftSVG8SVGLayerC11boundingBoxSo6CGRectVvp":{"name":"boundingBox","abstract":"<p>The minimum CGRect that fits all subpaths</p>","parent_name":"SVGLayer"},"Classes/SVGLayer.html#/s:8SwiftSVG8SVGLayerC12svgLayerCopyACSgvp":{"name":"svgLayerCopy","abstract":"<p>Returns a copy of the given SVGLayer</p>","parent_name":"SVGLayer"},"Classes/SVGLayer.html#/c:@CM@SwiftSVG@objc(cs)SVGLayer(py)fillColor":{"name":"fillColor","abstract":"<p>Applies the given fill color to all sublayers</p>","parent_name":"SVGLayer"},"Classes/SVGLayer.html#/c:@CM@SwiftSVG@objc(cs)SVGLayer(py)lineWidth":{"name":"lineWidth","abstract":"<p>Applies the given line width to all <code>CAShapeLayer</code>s</p>","parent_name":"SVGLayer"},"Classes/SVGLayer.html#/c:@CM@SwiftSVG@objc(cs)SVGLayer(py)strokeColor":{"name":"strokeColor","abstract":"<p>Applies the given stroke color to all <code>CAShapeLayer</code>s</p>","parent_name":"SVGLayer"},"Classes/SVGLayer.html":{"name":"SVGLayer","abstract":"<p>A <code>CAShapeLayer</code> subclass that allows you to easily work with sublayers and get sizing information</p>"},"Classes/SVGView.html":{"name":"SVGView","abstract":"<p>A <code>UIView</code> subclass that can be used in Interface Builder where you can set the @IBInspectable propert <code>SVGName</code> in the side panel. Use the UIView extensions if you want to creates SVG views programmatically.</p>"},"Classes/SVGCache.html":{"name":"SVGCache","abstract":"<p>A minimal in-memory cache class for caching <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SVGLayer.html\">SVGLayer</a></code>s. The <code>default</code> singleton is the default cache used and you can optionally create your own static singleton through an extension.</p>"},"Classes/SVGCircle.html":{"name":"SVGCircle","abstract":"<p>Concrete implementation that creates a <code>CAShapeLayer</code> from a <code>&lt;circle&gt;</code> element and its attributes</p>"},"Classes/SVGEllipse.html":{"name":"SVGEllipse","abstract":"<p>Concrete implementation that creates a <code>CAShapeLayer</code> from a <code>&lt;ellipse&gt;</code> element and its attributes</p>"},"Classes/SVGGroup.html":{"name":"SVGGroup","abstract":"<p>Concrete implementation that creates a container from a <code>&lt;g&gt;</code> element and applies its attribites to all sublayers</p>"},"Classes/SVGLine.html":{"name":"SVGLine","abstract":"<p>Concrete implementation that creates a <code>CAShapeLayer</code> from a <code>&lt;line&gt;</code> element and its attributes</p>"},"Classes/SVGPath.html":{"name":"SVGPath","abstract":"<p>Concrete implementation that creates a <code>CAShapeLayer</code> from a <code>&lt;path&gt;</code> element and its attributes</p>"},"Classes/SVGRectangle.html":{"name":"SVGRectangle","abstract":"<p>Concrete implementation that creates a <code>CAShapeLayer</code> from a <code>&lt;rect&gt;</code> element and its attributes</p>"},"Classes/NSXMLSVGParser.html":{"name":"NSXMLSVGParser","abstract":"<p>Concrete implementation of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SVGParser.html\">SVGParser</a></code> that uses Foundation&rsquo;s <code>XMLParser</code> to parse a given SVG file.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}